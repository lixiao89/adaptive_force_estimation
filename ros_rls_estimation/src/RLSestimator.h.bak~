#ifndef _RLS_ESTIMATOR_H
#define _RLS_ESTIMATOR_H

#include<iostream>
#include<cmath>
#include<vector>
#include<cisstCommon/cmnPath.h>
#include<cisstVector.h>
#include<algorithm>

class RLSestimator{

    public:
 
        // x[0] = mu is the cofficient of kinetic friction, x[1] = Fc is the estimated cutting force
        vctFixedSizeVector<double,2> x;  
        vctFixedSizeVector<double,2> xlast; // used for motionDetection feature
	vctFixedSizeVector<double,2> xLastSuccessful;
	vctFixedSizeVector<double,3> xv;
	vctFixedSizeVector<double,3> xvlast;

        // P is the covariance of x        
        vctFixedSizeMatrix<double,2,2> P;
        vctFixedSizeMatrix<double,2,2> Plast;
	vctFixedSizeMatrix<double,2,2> PlastSuccessful;
        vctFixedSizeMatrix<double,3,3> Pv;
        vctFixedSizeMatrix<double,3,3> Pvlast;

	double currTime;
        // Fest is the estimated total tangential force 
        double Fest;
        double FestLast; // used for motionDetection feature
	
        std::vector< std::vector<double> > jointPoses;
        std::vector<double> timeStamps;
        int avgNum;// number of joint position measurement to take in calculation of velocity
	
	//for use as saturation
	std::vector<double> saturation_mu;
	std::vector<double> saturation_Fc;
	vctFixedSizeVector<double,2> mu_limit;
	vctFixedSizeVector<double,2> Fc_limit;
	int saturationNum;
	double mu_limit_upper; 
	double mu_limit_lower;
	double Fc_limit_upper;
	double Fc_limit_lower;

        //failstate: used to indicate cutting failure (true if failed)
        bool failstate;
        // indicate contate state
        bool contactState;
        //wamNotMoving: is true when wam is not moving
        bool wamNotMoving;
        // true if wam is not moving;
        bool wamMotionState;
        
        // SC: sliding and cutting
        // SWC: sliding without cutting
        // CWS: cutting without sliding
        enum scenerio {IDLE, SC, SWC, CWS};
        scenerio sc;

        // error threshold
        double cuttingFailureThreshold; // defines when cutting failure happens
	double slidingThreshold; // defines when sliding without cutting happens
        double contactThreshold;//
	double tearingThreshold;
        //system matrix yk = Hk.transpose*x + v
        vctFixedSizeMatrix<double,2,1> Hk;
	vctFixedSizeMatrix<double,3,1> Hkv;
        // measurement error covariance
       // vctFixedSizeMatrix<double,2,2> Rk;
        double Rk;

        // yk is the measurement tangential force 
        double yk;

        //rlsEstData: is a vector containing [Fe, Fn, mu, Fc, Fest, haveFailed, haveTeared, haveSlipped] that gets pushed to ROS (gets changed by the method)
        vctDoubleVec rlsEstData; // for ROS
        //haveFailed: a double value used to draw a spike on rqt if failure happens (set to a large number)
        double haveFailed; // for cisst_msgs::rlsEstData
	double haveTeared;
	double haveSlided;

	double avgJointVel;
        // constructor
        RLSestimator(vctFixedSizeVector<double,2>& xinit, double& startTime): 
        
	x(xinit),
	  xlast(xinit),
	  xLastSuccessful(xinit),
	  P(vct2x2::Eye()),
	  currTime(startTime),
	  Plast(vct2x2::Eye()),   
	  PlastSuccessful(vct2x2::Eye()),
	  Rk(0.5),
	  failstate(false),
	  avgNum(100),
	  contactState(true),
	  wamMotionState(true),
	  wamNotMoving(true),  
	  sc(SWC),  
	  cuttingFailureThreshold(1.3), // tune this
	  slidingThreshold(1.2),        // tune this
	  contactThreshold(0.05),        // tune this
	  tearingThreshold(0.5),
	  mu_limit_upper(10.7), // tune
	  mu_limit_lower(-10.1),//tune
	  Fc_limit_upper(101),//tune
	  Fc_limit_lower(-200),//tune
	  Fest(0),
	  FestLast(0),
	  yk(0),
	  haveFailed(false),
	  haveTeared(false),
	  haveSlided(false),
	  avgJointVel(0){
                Hk[0][0] = 1;
                Hk[1][0] = 1; 
                
                timeStamps.push_back(startTime);
		
		//for saturation setup
		saturation_mu.push_back(1.58);//tune this
		saturation_Fc.push_back(40); //tune this
		mu_limit[0] = 90; 
		mu_limit[1] = -30;
		Fc_limit[0] = 80;
		Fc_limit[1] = -20;
		saturationNum = 500; // tune this
		

                // initialize jointPoses
                std::vector<double> temp(7, 0);
                for(int i = 0; i < avgNum; i++){jointPoses.push_back(temp);} 

                rlsEstData.SetSize(9);
                rlsEstData.Assign((double)0,0,0,0,0,0,0,0,0);
        
	
		vctFixedSizeVector<double,3>xvinit(0.5,0.5,7);
		xv = xvinit;
		xvlast = xvinit;
		Pv = vct3x3::Eye();
		Pvlast = vct3x3::Eye();
		Hkv[0][0] = 1;
		Hkv[1][0] = 1;
		Hkv[2][0] = 1;
	       }

        ~RLSestimator(){};
        
        //returns true if the cutter is in contact with the cutting surface
        bool inContact(const double& Fn){
	  if(abs(Fn) < contactThreshold && contactState == true){
                std::cout<< "Cutter in Contact" << std::endl;
                contactState = false;
            }
	  if(abs(Fn) > contactThreshold && contactState == false){
                std::cout<< "Cutter not in Contact!" << std::endl;
                contactState = true;
            }

	  if(abs(Fn) < contactThreshold){
                return false;
            }
	  if(abs(Fn) > contactThreshold){
                return true;
            }
        }

        // detects if WAM is in motion
        bool WAMnotMoving(const bool& wamNotMoving){
            if(wamNotMoving && wamMotionState == true){
                std::cout<< "WAM STOPPED!" << std::endl;
                wamMotionState = false;
                return true;
            }
            if(!wamNotMoving && wamMotionState == false){
                std::cout<< "WAM moving" << std::endl;
               wamMotionState = true;
                return false;
            }
        } 

        bool isSlidingWithoutCutting(const double& Fe, const double& currtime){
            
	  /*if(Fc > 1 && sc == SC){
                    std::cout<< "Cutting and sliding at Time" << currtime <<std::endl;
                    sc = SWC;
                    wamMotionState = true;
                    return false;
                }
                if( Fc <= 1 && sc == SWC){
                    std::cout<< "sliding without cutting at Time" << currtime << std::endl;
                    sc = SC;
                    wamMotionState = true;
                    return true;
		    }*/

	  // Fest > Fe + slidingThreshold indicate sliding without cutting
		if(Fest - Fe > slidingThreshold){
		  std::cout<< "sliding withoug cutting at time:" << currtime << std::endl; 
		}

               
        }      

        void GetEstimates (vctDoubleVec& rlsEstDataCopy) const{
            rlsEstDataCopy = rlsEstData;
        }        
        
        // returns true if detects a cutting failure
        // parameters:
        //
        // Fn: measured normal force
        // Fe: measured tangential force
        // xnew: newly estimated [mu, Fc]
        // Fnew: newly estimated tangential force
        // Cov: updated covariance matrix
	// withSaturation: impose a limit on estimated mu and Fc, turned on when true
	void Evaluate( const double &Fn, 
		       const double &Fe, 
		       const vctFixedSizeMatrix<double,2,2>p,
		       vctFixedSizeVector<double,2>& xnew, 
		       double& Fnew, 
		       vctFixedSizeMatrix<double,2,2>& Cov, 
		       bool withSaturation){

	  //  if (Fn < 0){ Hk[0][0] = Fn;}
	  //  if (Fn > 0){ Hk[0][0] = -Fn;}
                yk = Fe;
                Hk[0][0] = copysign(Fn,1);

                vctFixedSizeMatrix<double,2,1> K;
                vctFixedSizeMatrix<double,1,1> tempK;
                vctFixedSizeMatrix<double,1,1> invtempK;

                tempK = Hk.Transpose()*p*Hk + Rk;

                //Inverse(tempK,invtempK);
                //K = p*Hk*invtempK;
                invtempK[0][0] = 1/tempK[0][0];
                K = p*Hk*invtempK;

                xnew = xnew + K*(yk - Hk.Transpose()*xnew);

		//Cov = (vct2x2::Eye() - K*Hk.Transpose())*p;
		double CovforbeniusNorm;
                
		//calculate frobenius norm of Cov
		CovforbeniusNorm = sqrt(Cov[0][0]*Cov[0][0]+ Cov[1][0]*Cov[1][0]+ Cov[0][1]*Cov[0][1]+ Cov[1][1]*Cov[1][1]);
		  
		//to prevent P of becoming too small due to large estimation error (singularities, etc) and the estimator becomes unresponsive
		if(CovforbeniusNorm < 0.0001){Cov = vct2x2::Eye();}
                
	//impose saturation
		/*if ( withSaturation == true)
		{
		  if (xnew[0] > mu_limit[0]) {xnew[0] = mu_limit[0];}
		  if (xnew[0] < mu_limit[1]) {xnew[0] = mu_limit[1];}
		  if (xnew[1] > Fc_limit[0]) {xnew[1] = Fc_limit[0];}
		  if (xnew[1] < Fc_limit[1]) {xnew[1] = Fc_limit[1];}
		  Fnew = xnew[0]*Fn + xnew[1];
             	
		}
		else{*/
		  // use vector-type forgetting factor
		  double lamda_mu = 1/0.985;        // tune this
		  double lamda_Fc = 1/0.95;    // tune this

		  vctFixedSizeMatrix<double,2,2> Lamda;
		  Lamda[0][0] = lamda_mu;
		  Lamda[0][1] = 0;
		  Lamda[1][0] = 0;
		  Lamda[1][1] = lamda_Fc;
		
		  Cov = Lamda*(vct2x2::Eye() - K*Hk.Transpose())*p*Lamda;
		  
		  /* if (xnew[0] > mu_limit_upper) {xnew[0] = mu_limit_upper;} */
		  /* if (xnew[0] < mu_limit_lower) {xnew[0] = mu_limit_lower;} */
		  /* if (xnew[1] > Fc_limit_upper) {xnew[1] = Fc_limit_upper;} */
		  /* if (xnew[1] < Fc_limit_lower) {xnew[1] = Fc_limit_lower;} */

		  Fnew = xnew[0]*copysign(Fn,1) + xnew[1];
             
		  //xlast = xnew;
		  //Flast = Fnew;
		  // } 
	
               }



       bool EvaluateWithSaturation( const double &Fn, const double &Fe, bool withSaturation ){

                vctFixedSizeVector<double,2> x1(xlast);
		vctFixedSizeVector<double,3> xv1(xvlast);
                double F1 = FestLast;
        
                vctFixedSizeMatrix<double,2,2> Cov1(Plast);
		vctFixedSizeMatrix<double,3,3> Covv1(Pvlast);
                Evaluate(Fn, Fe, Plast, x1, F1, Cov1, withSaturation);
		//EvaluateWithViscousFriction(Fn, Fe, xv1, F1, Covv1, withSaturation);

		x = x1;
		Fest = F1;
		P = Cov1;
	               
                xlast = x;
                FestLast = Fest;
                Plast = P;

		xv = xv1;
		Pv = Covv1;
	               
                xvlast = xv;
                Pvlast = Pv;

		bool anomalyFail, anomalyTear, anomalySlip;
		// Fest > Fe + slidingThreshold indicate sliding without cutting
		if(Fn < 0 && Fest - Fe > slidingThreshold){
		  std::cout<< "sliding withoug cutting at time:" << currTime << std::endl;
		  haveSlided = 10;
		  anomalySlip = true;
		}
		else{
		  haveSlided = 0;
		  anomalySlip = false;
		}

		// catch tearing
		if(Fn > 0 && Fest - Fe > tearingThreshold){
		  std::cout << "tearing at time: " << currTime << std::endl;
		  haveTeared = 10;
		  anomalyTear = true;
		}
		else{
		  haveTeared = 0;
		  anomalyTear = false;
		}
		// Fe > Fest + cuttingFailureThreshold indicate cutting failure
		if(Fe - Fest > cuttingFailureThreshold){
		  haveFailed = 10;
		  anomalyFail = true;
		}
		else{
		  haveFailed = 0;
		  anomalyFail = false;
		}

		if(anomalySlip || anomalyTear || anomalyFail){
		 
		  xlast = xLastSuccessful;
		  Plast = PlastSuccessful;
		  return true;
		}
		else{
		  xLastSuccessful = xlast;
		  PlastSuccessful = Plast;
		  return false;
		}

        }


       /** parameters: 
        *
        * Fn: normal force as measured by the force sensor (currently force in the z direction)
        * Fe: tangential force as measured by the force sensor (currently force in the x direction)
        * currtime: current time = osaGetTime() - startTime
        * currJointPos: current joint positions for all 7 joints
               * motionDetection: a switch to toggle between with and without motion detection feature
        */

        
   void RLSestimate(const double &Fn, 
                    const double &Fe, 
                    const double& currtime,
                    const vctDynamicVector<double>& currJointPos, 
                    const std::string motionDetection = "OFF"){

        // detect is cutter is in contact
        //inContact(Fn);// Tested and works
        // detects if wam is motionDetection
     currTime = currtime;
     wamNotMoving = WAMIsNotMoving(currJointPos, currtime);
     WAMnotMoving(wamNotMoving);
     //isSlidingWithoutCutting(x[1], wamNotMoving, currtime);

     if (motionDetection == "OFF"){

       if((this->EvaluateWithSaturation( Fn, Fe, false ) || Fe > 15) && !failstate){
	 //std::cout<<"Cutting Failure at time:"<< currtime <<std::endl;
	 failstate = true;
	 haveFailed = 10;
	 //to prevent of P becoming too small due to large estimation error (singularities, etc) and the estimator becomes unresponsive
	 P = vct2x2::Eye();
       }
       else{
	 failstate = false;
	 haveFailed = 0;
       }
       
       rlsEstData.Assign((double)Fe, Fn, x[0], x[1], Fest, haveFailed, haveTeared, haveSlided, avgJointVel);
     }
     if (motionDetection == "ON"){
       
       bool anomaly;
       
       //if(wamNotMoving || !inContact(Fn) || Fe < 0){
	 if(wamNotMoving || Fe < 0){
	   x.Assign((double)0,0);
	   Fest = 0;
	   haveFailed = 0;
	   rlsEstData.Assign((double)Fe, Fn, x[0], x[1], Fest, haveFailed, haveTeared, haveSlided, avgJointVel);
	      
       }
       else{
	 //if (saturation_mu.size() < saturationNum) {
	 //anomaly = this->EvaluateWithSaturation( Fn, Fe, false );
	   /*saturation_mu.push_back(x[0]);
	   saturation_Fc.push_back(x[1]);

	   mu_limit[0] = *std::max_element(saturation_mu.begin(), saturation_mu.end());
	   mu_limit[1] = *std::min_element(saturation_mu.begin(), saturation_mu.end());
	   Fc_limit[0] = *std::max_element(saturation_Fc.begin(), saturation_Fc.end());
	   Fc_limit[1] = *std::min_element(saturation_Fc.begin(), saturation_Fc.end());

	   if (mu_limit[0] < 0) {mu_limit[0] = mu_limit_upper;}
	   if (mu_limit[1] < 0 || mu_limit[1] > mu_limit_upper) {mu_limit[0] = mu_limit_lower;}
	   if (Fc_limit[0] < 0) {Fc_limit[0] = Fc_limit_upper;}
	   if (Fc_limit[1] < 0 || Fc_limit[1] > Fc_limit_upper) {Fc_limit[1] = Fc_limit_lower;}
	   
	   if (mu_limit[0] > mu_limit_upper) {mu_limit[0] = mu_limit_upper;}
	   if (mu_limit[1] < mu_limit_lower) {mu_limit[0] = mu_limit_lower;}
	   if (Fc_limit[0] > Fc_limit_upper) {Fc_limit[0] = Fc_limit_upper;}
	   if (Fc_limit[1] < Fc_limit_lower) {Fc_limit[1] = Fc_limit_lower;}*/


	 //}
	 //if (saturation_mu.size() >= saturationNum) {
	   anomaly = this->EvaluateWithSaturation( Fn, Fe, false );
	   //}

	   //if((anomaly || Fe > 15) && !failstate){
	   if(anomaly || Fe > 15){
	   std::cout<<"Cutting Failure at time:"<< currtime <<std::endl;
	   //failstate = true;
	   // haveFailed = 10;
	   //P = vct2x2::Eye();

	   x.Assign((double)0,0);
	   Fest = 0;
	   }
	 else{
	   //failstate = false;
	   // haveFailed = 0;
	 }
	   rlsEstData.Assign((double)Fe, Fn, x[0], x[1], Fest, haveFailed, haveTeared, haveSlided, avgJointVel);
       }
     }
   }

  void CalcVectorAverage(const std::vector<double>& vect, double& avg){

      double temp = 0;
      for(int i = 0; i < vect.size(); i++){
            temp = temp + vect.at(i);
      }

      avg = temp/vect.size();
  }

void CalcAverageVelocity(const vctDynamicVector<double>& currJointPos, const double& currTime, vctDynamicVector<double>& avgVel){

    std::vector<double> temp;

    for(int i = 0; i < 7; i++){
        temp.push_back(currJointPos[i]);
    }

         jointPoses.push_back(temp);
         timeStamps.push_back(currTime);
        // process only the most recent avgNum data
        if(timeStamps.size() > avgNum){
            jointPoses.erase(jointPoses.begin());
            timeStamps.erase(timeStamps.begin());
        }
        vctDynamicVector<double> currPos( 7 , jointPoses.at(avgNum-1).at(0),jointPoses.at(avgNum-1).at(1),jointPoses.at(avgNum-1).at(2),jointPoses.at(avgNum-1).at(3),jointPoses.at(avgNum-1).at(4),jointPoses.at(avgNum-1).at(5),jointPoses.at(avgNum-1).at(6));

        vctDynamicVector<double> pastPos( 7 , jointPoses.at(0).at(0),jointPoses.at(0).at(1),jointPoses.at(0).at(2),jointPoses.at(0).at(3),jointPoses.at(0).at(4),jointPoses.at(0).at(5),jointPoses.at(0).at(6));

	if(timeStamps.size() >= avgNum){
	  vctDynamicVector<double> jointPosdiff = (currPos - pastPos).Abs();
	  double timediff = (timeStamps.at(avgNum-1) - timeStamps.at(0));
	  avgVel = jointPosdiff / timediff;
	  
	}
        else{
	  avgVel = currPos;
	}
         
}

bool WAMIsNotMoving( const vctDynamicVector<double>& currJointPos, const double& currTime){
      
    vctDynamicVector<double> jointAvgVel;
    CalcAverageVelocity(currJointPos, currTime, jointAvgVel);
    avgJointVel = jointAvgVel.MaxElement();
    double motionThreshold = 0.001;//tune this

        if(jointAvgVel[0] < motionThreshold && jointAvgVel[1] < motionThreshold && jointAvgVel[2] < motionThreshold && jointAvgVel[3] < motionThreshold && jointAvgVel[4] < motionThreshold && jointAvgVel[5] < motionThreshold && jointAvgVel[6] < motionThreshold){

            //std::cout<<jointAvgVel<<std::endl;
            return true;
        }
        else{

            //std::cout<<jointAvgVel<<std::endl;
            return false;
        }
}

      void Inverse(vctFixedSizeMatrix<double,2,2>& M, vctFixedSizeMatrix<double,2,2>& Minv){
            double detM;
            detM = M[0][0]*M[1][1] - M[0][1]*M[1][0];
            
            if(abs(detM) < 0.0001){
                detM = 0.0001;
            }

            Minv[0][0] = M[1][1];
            Minv[0][1] = -M[0][1];
            Minv[1][0] = -M[1][0];
            Minv[1][1] = M[0][0];

            Minv = (1/detM)*Minv;


        }
	/* void EvaluateWithViscousFriction( const double &Fn,  */
	/* 				  const double &Fe,  */
	/* 				  vctFixedSizeVector<double,3>& xnew,  */
	/* 				  double& Fnew,  */
	/* 				  vctFixedSizeMatrix<double,3,3>& Cov,  */
	/* 				  bool withSaturation){ */
	/*   double avgJointVelTemp; */
	/*   if(avgJointVel > 1){avgJointVelTemp = 1;} */
	/*   else{avgJointVelTemp = avgJointVel*1000;}     */

	/*         yk = Fe; */
        /*         Hkv[0][0] = Fn; */
	/* 	Hkv[1][0] = avgJointVelTemp; */

        /*         vctFixedSizeMatrix<double,3,1> K; */
        /*         vctFixedSizeMatrix<double,1,1> tempK; */
        /*         vctFixedSizeMatrix<double,1,1> invtempK; */

        /*         tempK = Hkv.Transpose()*Cov*Hkv + Rk; */

        /*         //Inverse(tempK,invtempK); */
        /*         //K = p*Hk*invtempK; */
        /*         invtempK[0][0] = 1/tempK[0][0]; */
        /*         K = Cov*Hkv*invtempK; */

        /*         xnew = xnew + K*(yk - Hkv.Transpose()*xnew); */

	/* 	//Cov = (vct2x2::Eye() - K*Hk.Transpose())*p; */
	/* 	double CovforbeniusNorm; */
                
	/* 	//calculate frobenius norm of Cov */
	/* 	//	CovforbeniusNorm = sqrt(Cov[0][0]*Cov[0][0]+ Cov[1][0]*Cov[1][0]+ Cov[0][1]*Cov[0][1]+ Cov[1][1]*Cov[1][1]); */
		  
	/* 	//to prevent P of becoming too small due to large estimation error (singularities, etc) and the estimator becomes unresponsive */
	/* 	//if(CovforbeniusNorm < 0.0001){Cov = vct3x3::Eye();} */
                
	/* 	// use vector-type forgetting factor */
	/* 	  double lamda_mu = 1/0.99;        // tune this */
	/* 	  double lamda_muv = 1/0.99; // tune this */
	/* 	  double lamda_Fc = 1/0.96;    // tune this */
		  
	/* 	  vctFixedSizeMatrix<double,3,3> Lamda; */
	/* 	  Lamda[0][0] = lamda_mu; */
	/* 	  Lamda[0][1] = 0; */
	/* 	  Lamda[0][2] = 0; */

	/* 	  Lamda[1][0] = 0; */
	/* 	  Lamda[1][1] = lamda_Fc; */
	/* 	  Lamda[1][2] = 0; */

	/* 	  Lamda[2][0] = 0; */
	/* 	  Lamda[2][1] = 0; */
	/* 	  Lamda[2][2] = lamda_muv; */
		
	/* 	  Cov = Lamda*(vct3x3::Eye() - K*Hkv.Transpose())*Cov*Lamda; */
			

	/* 	  Fnew = xnew[0]*Fn + xnew[1]*avgJointVelTemp + xnew[2]; */
             
	/* 	  //xlast = xnew; */
	/* 	  //Flast = Fnew;  */
	
        /*        } */



};




#endif

