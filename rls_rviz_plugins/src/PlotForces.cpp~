/*
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Willow Garage, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <iostream>

#include "PlotForces.h"
#include "ForceDrawWidget.h"
#include <QTimer>
#include <QVBoxLayout>

namespace rls_rviz_plugins
{


PlotForces::PlotForces( QWidget* parent )
  : rviz::Panel( parent )
  , Ft( 0 )
  , Fest( 0 )
  , Ferror( 0 )
{
  
  QTimer* dataTimer = new QTimer;
  w = new QWidget;
  cp = new QCustomPlot(w);
  
  QVBoxLayout* layout = new QVBoxLayout;
  
  layout->addWidget(cp);
  setLayout(layout);

  rlsSub_=nh_.subscribe<cisst_msgs::rlsEstData>( "rlsEstData", 1000, &PlotForces::getrlsEstDataCallback, this );

  connect(dataTimer, SIGNAL( timeout() ), this, SLOT( Plot() ) );
  dataTimer->start(10); // Interval 0 means to refresh as fast as possible          
    

}


  void PlotForces::Plot(){
    cp->addGraph();
    cp->graph(0)->setPen(QPen(Qt::blue));
    cp->graph(0)->setBrush(QBrush(QColor(240, 255, 200)));
    cp->graph(0)->setAntialiasedFill(false);

    cp->addGraph();
    cp->graph(1)->setPen(QPen(Qt::red));
    cp->graph(1)->setBrush(QBrush(QColor(220, 255, 200, 128)));
    cp->graph(1)->setAntialiasedFill(false);


    cp->xAxis->setTickLabelType(QCPAxis::ltDateTime);
    cp->xAxis->setDateTimeFormat("hh:mm:ss");
    cp->xAxis->setAutoTickStep(false);
    cp->xAxis->setTickStep(2);
    cp->axisRect()->setupFullAxesBox();

    // make left and bottom axes transfer their ranges to right and top axes\       

    connect(cp->xAxis, SIGNAL(rangeChanged(QCPRange)), cp->xAxis2, \
	    SLOT(setRange(QCPRange)));
    connect(cp->yAxis, SIGNAL(rangeChanged(QCPRange)), cp->yAxis2, \
	    SLOT(setRange(QCPRange)));

 
     double key = QDateTime::currentDateTime().toMSecsSinceEpoch()/1000.0;

     static double lastPointKey = 0;
     if( key - lastPointKey > 0.01 ){
    //   // add data to lines:                                                         
       cp->graph(0)->addData(key, Ft);
       cp->graph(1)->addData(key, Fest);
       cp->graph(0)->removeDataBefore(key-8);
       cp->graph(1)->removeDataBefore(key-8);

       cp->graph(0)->rescaleValueAxis(true);
       cp->graph(1)->rescaleValueAxis(true);
       lastPointKey = key;
     }


     cp->xAxis->setRange(key+0.25, 8, Qt::AlignRight);
     cp->replot();


  }


// Save all configuration data from this panel to the given
// Config object.  It is important here that you call save()
// on the parent class so the class id and panel name get saved.
void PlotForces::save( rviz::Config config ) const
{
  rviz::Panel::save( config );
}

// Load all configuration data for this panel from the given Config object.
void PlotForces::load( const rviz::Config& config )
{
  rviz::Panel::load( config );
}

} 

// Tell pluginlib about this class.  Every class which should be
// loadable by pluginlib::ClassLoader must have these two lines
// compiled in its .cpp file, outside of any namespace scope.
#include <pluginlib/class_list_macros.h>
PLUGINLIB_EXPORT_CLASS(rls_rviz_plugins::PlotForces,rviz::Panel )

